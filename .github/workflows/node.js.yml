# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: [ubuntu-latest]
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ vars.DOCKER_PASSWORD }}
    steps:
      - name: Read a variable docker username
        run: echo "My docker_username value is $DOCKER_USERNAME"
      - name: Read a variable docker password
        run: echo "My docker_password value is $DOCKER_PASSWORD"
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Login to docker hub
        run: docker login -u ${{ vars.DOCKER_USERNAME }} -p ${{ vars.DOCKER_PASSWORD }}
      - name: Build docker image
        run: docker build -t nes224/nodejscicd .
      - name: Publish image to docker hub
        run: docker push nes224/nodejscicd:latest
  
  deploy:
    needs: build
    runs-on: [ubuntu-latest]
    env:
      DEPLOY_PATH: /home/ec2-user/node-test-api
      EC2: ${{ vars.EC2_DEV }}
      SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY_DEV }}
    steps:
      - name: Authorized
        run: |
          apt-get update -qq
          apt-get install -qq git
          # Setup SSH deploy keys
          "which ssh-agent || ( apt-get install -qq openssh-client )"
          eval $(ssh-agent -s)
          ssh-add <(echo "$SSH_PRIVATE_KEY")
          mkdir -p ~/.ssh
          '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyCheck
      - name: Deploy Docker to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no $EC2 "mkdir $DEPLOY_PATH && cd $DEPLOY_PATH"




             
